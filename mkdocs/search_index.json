{
    "docs": [
        {
            "location": "/", 
            "text": "MkDocs Versioned\n\uf0c1\n\n\nThe \nmkdocs-versioned\n project adds the ability to build multiple versions of\nMkDocs documentation projects. This is a popular requirement, if, for example\nyou want to set both development docs and those for the stable release. Or, you\nmay still support an old release and have users using it.\n\n\n\n\nWarning\n\n\nThis work is experimental and should be viewed as a very early alpha, that\nsortof works.\n\n\n\n\nUsage\n\uf0c1\n\n\nSimply install with pip, \npip install mkdocs-versioned\n and then use the command\n\nmkdocs_versioned\n. This command is similar to \nmkdocs build\n, view the \n--help\n\noutput to see some of the configuration options.\n\n\nBy default, it will attempt to build all versions, and it will build the latest\ndocs to both / and /latest. To show a specific version at the root, use\n\nmkdocs_versioned --default=0.13.0\n. Replacing 0.13.0 with the version you want\nto use.\n\n\n\n\nWarning\n\n\nFor mkdocs-versioned to work, it assumes that each of the branches can be\nbuilt with the installed version of Mkdocs.\n\n\n\n\nTODO\n\uf0c1\n\n\n\n\n\n\nWe currently use private mkdocs API's because there isn't a way to hook in\nyet. This work is partly helping in providing input on what hooks are needed\nfor plugins to work well with MkDocs\n\n\n\n\n\n\nProvide a version switcher, like Django has. Currently the only way to switch\nversion is by hacking the URL and knowing what to look for.\n\n\n\n\n\n\nBuild each version to a tmp directory and then move it over. This helps us\navoid the issue of docs having one version fail and being partly built\n\n\n\n\n\n\nHow can we better handle changes in MkDocs config in different versions?\nFor example, an old version of the docs may require an old MkDocs due to an\nold setting or maybe a out of date custom theme. I think we probably need to\njust say that the branch needs to be buildable with latest. If they want to\nrender the docs, they should be happy enough doing minor updates to make sure\nit builds.\n\n\n\n\n\n\nAdd plugin support upstream in MkDocs. We need the following entry points.\n\n\n\n\nA way to register extra commands, \nmkdocs build-versioned\n maybe?\n\n\nSomething to add or modify the config being used. Possibly also adding\n   our own config options.\n3, A way to trigger the build multiple times.", 
            "title": "Home"
        }, 
        {
            "location": "/#mkdocs-versioned", 
            "text": "The  mkdocs-versioned  project adds the ability to build multiple versions of\nMkDocs documentation projects. This is a popular requirement, if, for example\nyou want to set both development docs and those for the stable release. Or, you\nmay still support an old release and have users using it.   Warning  This work is experimental and should be viewed as a very early alpha, that\nsortof works.", 
            "title": "MkDocs Versioned"
        }, 
        {
            "location": "/#usage", 
            "text": "Simply install with pip,  pip install mkdocs-versioned  and then use the command mkdocs_versioned . This command is similar to  mkdocs build , view the  --help \noutput to see some of the configuration options.  By default, it will attempt to build all versions, and it will build the latest\ndocs to both / and /latest. To show a specific version at the root, use mkdocs_versioned --default=0.13.0 . Replacing 0.13.0 with the version you want\nto use.   Warning  For mkdocs-versioned to work, it assumes that each of the branches can be\nbuilt with the installed version of Mkdocs.", 
            "title": "Usage"
        }, 
        {
            "location": "/#todo", 
            "text": "We currently use private mkdocs API's because there isn't a way to hook in\nyet. This work is partly helping in providing input on what hooks are needed\nfor plugins to work well with MkDocs    Provide a version switcher, like Django has. Currently the only way to switch\nversion is by hacking the URL and knowing what to look for.    Build each version to a tmp directory and then move it over. This helps us\navoid the issue of docs having one version fail and being partly built    How can we better handle changes in MkDocs config in different versions?\nFor example, an old version of the docs may require an old MkDocs due to an\nold setting or maybe a out of date custom theme. I think we probably need to\njust say that the branch needs to be buildable with latest. If they want to\nrender the docs, they should be happy enough doing minor updates to make sure\nit builds.    Add plugin support upstream in MkDocs. We need the following entry points.   A way to register extra commands,  mkdocs build-versioned  maybe?  Something to add or modify the config being used. Possibly also adding\n   our own config options.\n3, A way to trigger the build multiple times.", 
            "title": "TODO"
        }
    ]
}